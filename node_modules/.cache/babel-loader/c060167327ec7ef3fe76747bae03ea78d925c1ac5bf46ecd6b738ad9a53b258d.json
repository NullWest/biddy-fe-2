{"ast":null,"code":"var _jsxFileName = \"/Users/davebinary/code/biddy-ts/src/components/userInputField/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserInputField({\n  onSubmit\n}) {\n  _s();\n  const [text, setText] = useState('');\n  const [rows, setRows] = useState(1);\n  const maxRows = 7;\n  const handleChange = event => {\n    const textareaLineHeight = 24; // Approximate line height in pixels for Tailwind\n    const previousRows = event.target.rows;\n    event.target.rows = 1; // reset number of rows in textarea\n\n    const currentRows = Math.floor(event.target.scrollHeight / textareaLineHeight);\n    if (currentRows === previousRows) {\n      event.target.rows = currentRows;\n    }\n    if (currentRows >= maxRows) {\n      event.target.rows = maxRows;\n      event.target.scrollTop = event.target.scrollHeight;\n    }\n    setText(event.target.value);\n    setRows(currentRows < maxRows ? currentRows : maxRows);\n  };\n  const handleSubmit = () => {\n    if (text.trim()) {\n      // Ensure text is not just whitespace\n      onSubmit(text);\n      setText(''); // Clear the text area after submission\n      setRows(1); // Reset textarea rows\n    }\n  };\n  const handleKeyDown = event => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      // Submit on Enter, not Shift+Enter\n      event.preventDefault(); // Prevent new line\n      handleSubmit();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"w-full p-2 bg-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\",\n      rows: rows,\n      value: text,\n      placeholder: \"Type anything...\",\n      onChange: handleChange,\n      onKeyDown: handleKeyDown,\n      style: {\n        resize: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Enter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(UserInputField, \"McJuiO0h4SEFzTBRSgEcKb21bIY=\");\n_c = UserInputField;\nvar _c;\n$RefreshReg$(_c, \"UserInputField\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UserInputField","onSubmit","_s","text","setText","rows","setRows","maxRows","handleChange","event","textareaLineHeight","previousRows","target","currentRows","Math","floor","scrollHeight","scrollTop","value","handleSubmit","trim","handleKeyDown","key","shiftKey","preventDefault","className","children","placeholder","onChange","onKeyDown","style","resize","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/davebinary/code/biddy-ts/src/components/userInputField/index.tsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nexport default function UserInputField({ onSubmit }: { onSubmit: Function }) {\n  const [text, setText] = useState('');\n  const [rows, setRows] = useState(1);\n  const maxRows = 7;\n\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const textareaLineHeight = 24; // Approximate line height in pixels for Tailwind\n    const previousRows = event.target.rows;\n    event.target.rows = 1; // reset number of rows in textarea\n\n    const currentRows = Math.floor(event.target.scrollHeight / textareaLineHeight);\n\n    if (currentRows === previousRows) {\n      event.target.rows = currentRows;\n    }\n\n    if (currentRows >= maxRows) {\n      event.target.rows = maxRows;\n      event.target.scrollTop = event.target.scrollHeight;\n    }\n\n    setText(event.target.value);\n    setRows(currentRows < maxRows ? currentRows : maxRows);\n  };\n\n  const handleSubmit = () => {\n    if (text.trim()) { // Ensure text is not just whitespace\n      onSubmit(text);\n      setText(''); // Clear the text area after submission\n      setRows(1); // Reset textarea rows\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.key === 'Enter' && !event.shiftKey) { // Submit on Enter, not Shift+Enter\n      event.preventDefault(); // Prevent new line\n      handleSubmit();\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <textarea\n        className=\"w-full p-2 bg-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        rows={rows}\n        value={text}\n        placeholder=\"Type anything...\"\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        style={{ resize: 'none' }}\n      />\n      <button onClick={handleSubmit}>Enter</button>\n    </div>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,cAAcA,CAAC;EAAEC;AAAiC,CAAC,EAAE;EAAAC,EAAA;EAC3E,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAMU,OAAO,GAAG,CAAC;EAEjB,MAAMC,YAAY,GAAIC,KAA6C,IAAK;IACtE,MAAMC,kBAAkB,GAAG,EAAE,CAAC,CAAC;IAC/B,MAAMC,YAAY,GAAGF,KAAK,CAACG,MAAM,CAACP,IAAI;IACtCI,KAAK,CAACG,MAAM,CAACP,IAAI,GAAG,CAAC,CAAC,CAAC;;IAEvB,MAAMQ,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACN,KAAK,CAACG,MAAM,CAACI,YAAY,GAAGN,kBAAkB,CAAC;IAE9E,IAAIG,WAAW,KAAKF,YAAY,EAAE;MAChCF,KAAK,CAACG,MAAM,CAACP,IAAI,GAAGQ,WAAW;IACjC;IAEA,IAAIA,WAAW,IAAIN,OAAO,EAAE;MAC1BE,KAAK,CAACG,MAAM,CAACP,IAAI,GAAGE,OAAO;MAC3BE,KAAK,CAACG,MAAM,CAACK,SAAS,GAAGR,KAAK,CAACG,MAAM,CAACI,YAAY;IACpD;IAEAZ,OAAO,CAACK,KAAK,CAACG,MAAM,CAACM,KAAK,CAAC;IAC3BZ,OAAO,CAACO,WAAW,GAAGN,OAAO,GAAGM,WAAW,GAAGN,OAAO,CAAC;EACxD,CAAC;EAED,MAAMY,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAIhB,IAAI,CAACiB,IAAI,CAAC,CAAC,EAAE;MAAE;MACjBnB,QAAQ,CAACE,IAAI,CAAC;MACdC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;MACbE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACd;EACF,CAAC;EAED,MAAMe,aAAa,GAAIZ,KAA+C,IAAK;IACzE,IAAIA,KAAK,CAACa,GAAG,KAAK,OAAO,IAAI,CAACb,KAAK,CAACc,QAAQ,EAAE;MAAE;MAC9Cd,KAAK,CAACe,cAAc,CAAC,CAAC,CAAC,CAAC;MACxBL,YAAY,CAAC,CAAC;IAChB;EACF,CAAC;EAED,oBACEpB,OAAA;IAAK0B,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5B3B,OAAA;MACE0B,SAAS,EAAC,uFAAuF;MACjGpB,IAAI,EAAEA,IAAK;MACXa,KAAK,EAAEf,IAAK;MACZwB,WAAW,EAAC,kBAAkB;MAC9BC,QAAQ,EAAEpB,YAAa;MACvBqB,SAAS,EAAER,aAAc;MACzBS,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAO;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eACFpC,OAAA;MAAQqC,OAAO,EAAEjB,YAAa;MAAAO,QAAA,EAAC;IAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEV;AAACjC,EAAA,CAtDuBF,cAAc;AAAAqC,EAAA,GAAdrC,cAAc;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}